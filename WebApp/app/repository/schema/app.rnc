# -*- rnc -*-
# RELAX NG Compact Syntax Grammar for the Atom Protocol

namespace app = "http://purl.org/atom/app#"
namespace atom = "http://www.w3.org/2005/Atom"
namespace local = ""
namespace xhtml = "http://www.w3.org/1999/xhtml"
namespace xsd = "http://www.w3.org/2001/XMLSchema"

start = appService
# common:attrs
atomURI = text
appCommonAttributes =
    attribute xml:base { atomURI }?,
    attribute xml:lang { atomLanguageTag }?,
    undefinedAttribute*
atomCommonAttributes = appCommonAttributes
undefinedAttribute = attribute * - (xml:base | xml:lang | local:*) { text }
atomLanguageTag = xsd:string { pattern = "[A-Za-z]{1,8}(-[A-Za-z0-9]{1,8})*" }
atomDateConstruct = appCommonAttributes, xsd:dateTime
# app:service
appService = element app:service { appCommonAttributes, (appWorkspace+ & extensionElement*) }
# app:workspace
appWorkspace =
    element app:workspace { appCommonAttributes, (atomTitle & appCollection* & extensionElement*) }
atomTitle = element atom:title { atomTextConstruct }
# app:collection
appCollection =
    element app:collection {
        appCommonAttributes,
        attribute href { atomURI },
        (atomTitle & appAccept? & appCategories* & extensionElement*)
    }
# app:categories
atomCategory =
    element atom:category {
        atomCommonAttributes,
        attribute term { text },
        attribute scheme { atomURI }?,
        attribute label { text }?,
        undefinedContent
    }
appInlineCategories =
    element app:categories {
        attribute fixed { "yes" | "no" }?,
        attribute scheme { atomURI }?,
        atomCategory*
    }
appOutOfLineCategories =
    element app:categories {
        attribute href { atomURI },
        undefinedContent
    }
appCategories = appInlineCategories | appOutOfLineCategories
# app:accept
appAccept = element app:accept { appCommonAttributes, appTypeValue? }
appTypeValue = "entry" | media-type | entry-or-media-type
media-type = xsd:string { pattern = "entry,(.+/.+,?)*" }
entry-or-media-type = xsd:string { pattern = "(.+/.+,?)*" }
# above is an approximation, rnc doesn't support interleaved text

# Simple Extension
simpleExtensionElement = element * - app:* { text }
# Structured Extension
structuredExtensionElement =
    element * - app:* {
        (attribute * { text }+,
         (text | anyElement)*)
        | (attribute * { text }*,
           (text?, anyElement+, (text | anyElement)*))
    }
# Other Extensibility
extensionElement = simpleExtensionElement | structuredExtensionElement
undefinedContent = (text | anyForeignElement)*
# Extensions
anyElement =
    element * {
        (attribute * { text }
         | text
         | anyElement)*
    }
anyForeignElement =
    element * - atom:* {
        (attribute * { text }
         | text
         | anyElement)*
    }
atomPlainTextConstruct =
    atomCommonAttributes,
    attribute type { "text" | "html" }?,
    text
atomXHTMLTextConstruct =
    atomCommonAttributes,
    attribute type { "xhtml" },
    xhtmlDiv
atomTextConstruct = atomPlainTextConstruct | atomXHTMLTextConstruct
anyXHTML =
    element xhtml:* {
        (attribute * { text }
         | text
         | anyXHTML)*
    }
xhtmlDiv =
    element xhtml:div {
        (attribute * { text }
         | text
         | anyXHTML)*
    }
# EOF
